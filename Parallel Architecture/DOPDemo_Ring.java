import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.io.InputStreamReader;
import java.io.BufferedReader;

class EightPuzzle {

	// Use of queue for storing each state
    Queue<String> queue = new LinkedList<String>();    
	//used for keep track of states and removing repeated states
    Map<String,Integer> stateDepth = new HashMap<String, Integer>();
	//Relate each state to its  previous state
   Map<String,String> stateHistory = new HashMap<String,String>(); 

  

    //Add method to add the new string to the Map and Queue
synchronized   void add(String newState, String oldState,int i){
        if(!stateDepth.containsKey(newState)){
            int newValue = oldState == null ? 0 : stateDepth.get(oldState) + 1 ;
            stateDepth.put(newState, newValue);
            queue.add(newState);
	    System.out.println("String added in Queue at depth "+newValue+" by processor "+i+" is "+newState);	
            stateHistory.put(newState, oldState);
        }
    }

    /* Each of the Methods below Takes the Current State of Board as String. Then the operation to move the blank space is done if possible.
      After that the new string is added to the map and queue.If it is the Goal State then the Program Terminates.
     */
  

 synchronized    void checkCompletion(String oldState, String newState,int i) {
        add(newState, oldState,i);
        if(newState.equals("123456780")) {
            System.out.println("Solution Exists at Level "+stateDepth.get(newState)+" of the tree by processor "+i);
            String traceState = newState;
            while (traceState != null) {
                System.out.println(traceState + " at " + stateDepth.get(traceState));
                traceState = stateHistory.get(traceState);
            }
            System.exit(0);
        }
}
	  void up(String currentState,int i)
{
        int a = currentState.indexOf("0");
        if(a>2){
            String nextState = currentState.substring(0,a-3)+"0"+currentState.substring(a-2,a)+currentState.charAt(a-3)+currentState.substring(a+1);
		System.out.println("next state generated by processor "+i+" is "+nextState);
            checkCompletion(currentState, nextState,i);
        }
    }

    void down(String currentState,int i){
        int a = currentState.indexOf("0");
        if(a<6){
            String nextState = currentState.substring(0,a)+currentState.substring(a+3,a+4)+currentState.substring(a+1,a+3)+"0"+currentState.substring(a+4);
	    System.out.println("next state generated by processor "+i+" is "+nextState);	
            checkCompletion(currentState, nextState,i);
        }
    }
    void left(String currentState,int i){
        int a = currentState.indexOf("0");
        if(a!=0 && a!=3 && a!=6){
            String nextState = currentState.substring(0,a-1)+"0"+currentState.charAt(a-1)+currentState.substring(a+1);
            System.out.println("next state generated by processor "+i+" is "+nextState);
            checkCompletion(currentState, nextState,i);
        }
    }
    void right(String currentState,int i){
        int a = currentState.indexOf("0");
        if(a!=2 && a!=5 && a!=8){
            String nextState = currentState.substring(0,a)+currentState.charAt(a+1)+"0"+currentState.substring(a+2);
	    System.out.println("next state generated by processor "+i+" is "+nextState);	
            checkCompletion(currentState, nextState,i);
        }
    }
private int sid;
	private int rid;
	boolean set=false;
	private String r;
	synchronized void putMessage(int sid,int rid,String r) 
        throws InterruptedException { 

			if(set)
				wait();
            this.r=r;
			this.sid=sid;
			this.rid=rid;
			set=true;
			notifyAll();
        
    } 

    
     synchronized String getMessage(int sid,int rid) 
        throws InterruptedException { 
       
        while ( !set || this.sid!=sid ||this.rid!=rid) 
            wait(); 
		String r=this.r;
		set=false;
		notifyAll();
                return r; 
    }	
    


}
class DOP implements Runnable
{
int name;
EightPuzzle eightPuzzle;
	Thread t;
String currentState;
	DOP(int name,EightPuzzle eightPuzzle) 
	{
		this.name = name;
		this.eightPuzzle=eightPuzzle;
		
		t=new Thread(this, name+"");
		System.out.println("hi processor "+this.name);
		
		t.start();
	}
	public void run()
	{
	try{
		 int mask=1;
		int id=this.name;
		
		for(int phase=1;phase<=2;phase++)
		{
		int phase_max=1<<phase;
		if(0<=id && id<phase_max)
		if(0<=id && id<=phase_max/2-1)
		{	
			
			currentState=eightPuzzle.queue.peek();
			int receiver=id | mask;
			System.out.println("generated state by "+this.name+" is "+currentState+" for "+receiver);
			eightPuzzle.putMessage(id,receiver,currentState);
		}
		else
		{
			int sender=id & (~mask);
			
			String state=eightPuzzle.getMessage(sender,id);
			System.out.println("received state by "+this.name+" is "+state+" from "+sender);
		}
		mask=mask<<1;
		}
         if(name==0)	{ while(!eightPuzzle.queue.isEmpty())
	{	 currentState =eightPuzzle.queue.remove(); 	
               eightPuzzle.up(currentState,0);
	 	eightPuzzle.down(currentState,1);
		eightPuzzle.left(currentState,2);
		eightPuzzle.right(currentState,3);
	}
	}   

	
}catch(Exception e){System.out.println(e);}
}

}

class DOPDemo 
{



 public static void main(String args[]){

        String str=null;
	try{
	InputStreamReader isr=new InputStreamReader(System.in);
	BufferedReader buffer=new BufferedReader(isr);
	str=buffer.readLine();                                 // Input the Board State as a String with 0 as the Blank Space

        EightPuzzle eightPuzzle=new EightPuzzle();
	 eightPuzzle.add(str, null,0);	
		
                       
	 DOP p1= new DOP(0,eightPuzzle);                                       // Move the blank space up and add new state to queue
         DOP  p2= new DOP(1,eightPuzzle);                                     // Move the blank space down
         DOP  p3= new DOP(2,eightPuzzle);                                     // Move left
         DOP  p4= new DOP(3,eightPuzzle); 

p1.t.join();
	p2.t.join();
p3.t.join();
p4.t.join();System.out.println("enter ing ");
}
catch (Exception e) {
System.out.println("Main thread Interrupted");	                         // Move right and remove the current node from Queue
        }
System.out.println("Solution doesn't exist");
    
}
}
